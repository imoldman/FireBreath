#!/usr/bin/env python
# coding=utf-8
# vim: shiftwidth=4 tabstop=4 expandtab

'''本脚本用来产生boost目录下所有头文件，如果想增删头文件，请修改ALL_HEADERS列表'''

import os
import re
import shutil

# !!ALPHABETICAL ORDER!!
ALL_HEADERS = [
#    (
#        r'boost/bind.hpp', r'functional', '''
#namespace boost { 
#using std::bind;
#}'''
#    ),
#   # (r'boost/cast.hpp', r'cast'),
#    # (r'boost/config.hpp', r'config'),
#    (r'boost/cstdint.hpp', r'cstdint'),
#    (
#        r'boost/enable_shared_from_this.hpp', r'memory', '''
#namespace boost {
#using std::enable_shared_from_this;
#}'''
#    ),
#    # (r'boost/foreach.hpp', r'foreach'),
#    # (r'boost/format.hpp', r'format'),
#    (
#        r'boost/function.hpp', r'functional', '''
#namespace boost { 
#using std::function;
#using std::swap;
#}'''
#    ),
#    # (r'boost/function_types/is_member_function_pointer.hpp', r'type_traits'),
#    # (r'boost/integer_traits.hpp', r'integer_traits'),
    (r'boost/make_shared.hpp', r'internal/memory_wrapper.hpp', ''),
#    # (r'boost/scoped_array.hpp', r'scoped_array'),
#    # (r'boost/scoped_ptr.hpp', r'scoped_ptr'),
#    # (r'boost/shared_array.hpp', r'shared_array'),
    (r'boost/shared_ptr.hpp', r'internal/memory_wrapper.hpp', ''),
    (r'boost/smart_ptr/enable_shared_from_this.hpp', r'internal/memory_wrapper.hpp', ''),
    (r'boost/smart_ptr/make_shared.hpp', r'internal/memory_wrapper.hpp', ''),
    (r'boost/smart_ptr/bad_weak_ptr.hpp', r'internal/memory_wrapper.hpp', ''),
#    (
#        r'boost/thread.hpp', r'thread', '''
##include <boost/thread/mutex.hpp>
##include <boost/thread/recursive_mutex.hpp>
##include <boost/thread/thread.hpp>
##include <boost/thread/condition_variable.hpp>
#'''
#    ),
#    (
#        r'boost/thread/condition_variable.hpp', r'condition_variable', '''
#namespace boost {
#using std::condition_variable;
#using std::condition_variable_any;
#}'''
#    ),
#    (
#        r'boost/thread/mutex.hpp', r'mutex', '''
#namespace boost {
#using std::mutex;
#}'''
#    ),
#    (
#        r'boost/thread/recursive_mutex.hpp', r'mutex', '''
#namespace boost {
#using std::unique_lock;
#class recursive_mutex : public std::recursive_mutex {
#public:
#    typedef std::unique_lock<recursive_mutex> scoped_lock;
#};
#}'''
#    ),
##    #(r'boost/thread/shared_mutex.hpp', r'shared_mutex'),
#    (
#        r'boost/thread/thread.hpp', r'thread', '''
#namespace boost {
#using std::thread;
#namespace this_thread = std::this_thread;
#// namespace thread_group {} ??? not implemented
#}'''
#    ),
#    (
#        r'boost/tuple/tuple.hpp', r'tuple', '''
#namespace boost {
#using std::get;
#using std::make_tuple;
#using std::swap;
#using std::tie;
#using std::tuple;
#}'''
#    ),
#    (
#        r'boost/tuple/tuple_comparison.hpp', r'tuple', ''
#    ),
#    (r'boost/type_traits.hpp', r'type_traits'),
#    #(r'boost/type_traits/is_arithmetic.hpp', r'is_arithmetic'),
#    #(r'boost/type_traits/is_floating_point.hpp', r'is_floating_point'),
#    #(r'boost/type_traits/is_integral.hpp', r'is_integral'),
#    #(r'boost/type_traits/is_same.hpp', r'is_same'),
#    #(r'boost/type_traits/remove_const.hpp', r'remove_const'),
#    #(r'boost/type_traits/remove_reference.hpp', r'remove_reference'),
    (r'boost/weak_ptr.hpp', r'internal/memory_wrapper.hpp', ''),
#    #(r'boost\smart_ptr\scoped_array.hpp', r'scoped_array'),
#    #(r'boost\smart_ptr\shared_array.hpp', r'shared_array'),
]

def gen_file(boost_header_path, std_header_path, additional_content):
    template = '''//!
// THIS FILE IS GENERATED BY gen.py, PLEASE DONT MODIFY DIRECTLY
//
#ifndef {header_guard}
#define {header_guard}
#define FAKE_{header_guard}

#include <{std_header}>  // #include <{boost_header}>
{additional_content}

#endif // #define {header_guard}
'''
    this_dir = os.path.dirname(os.path.abspath(__file__))
    full_boost_header_path = os.path.join(this_dir, boost_header_path)
    header_directory, _ = os.path.split(full_boost_header_path)
    if not os.path.exists(header_directory):
        os.makedirs(header_directory)
    header_guard = re.sub(r'[.\\/]', '_', boost_header_path).upper()
    # full_boost_header_path = os.path.join(this_dir, r'boost/test.hpp')
    print >> open(full_boost_header_path, 'a'), \
             template.format(header_guard=header_guard,
                             std_header=std_header_path,
                             boost_header=boost_header_path,
                             additional_content=additional_content)

def main():
    # delete all files in boost dir
    this_dir = os.path.dirname(os.path.abspath(__file__))
    boost_dir = os.path.join(this_dir, 'boost')
    if os.path.exists(boost_dir):
        shutil.rmtree(boost_dir)
    for boost_header, std_header, content in ALL_HEADERS:
        gen_file(boost_header, std_header, content)

if __name__ == '__main__':
    main()

